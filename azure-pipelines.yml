parameters:
- name: ServiceConnection
  displayName: "Name of ARM based Service Connection"
  type: string

- name: ACRname
  displayName: "Name of Azure Container Registry"
  type: string

- name: ACRrepo
  displayName: "Name of ACR repository where to push image"
  type: string

- name: DockerfilePath
  displayName: "Location of Dockerfile to build image"
  type: string

- name: imageTags
  displayName: "tags to be used in image"
  type: string

- name: buildArgs
  displayName: "arguements to be passed while docker build"
  type: string

- name: buildContext
  displayName: "Context to be used by Docker Build"
  type: string


steps:

- task: AzureCLI@2
  name: ACRlogin
  displayName: 'Azure Container Registry Login'
  inputs:
    azureSubscription: '${{ parameters.ServiceConnection}}'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr login ${{ parameters.ACRname }}

- task: AzureCLI@2
  name: DockerBuild
  displayName: 'Docker Build'
  inputs:
    azureSubscription: '${{ parameters.ServiceConnection}}'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      try {
        $registry = "${{ parameters.ACRname}}.azurecr.io" #create registry url

        docker build -f ${{ parameters.DockerfilePath}} -t buildimage ${{ parameters.buildArgs}} ${{ parameters.buildContext}} #buildimage name is taken to refer when passing tags

        if(!$?){
          throw "docker build failed" #cross check for build failure
        }

        $tags = ${{ parameters.imageTags}} -split "[\n,]+" #consider multiple tags separated by ','
        Foreach($tag in tags){
          $taggedimage = "$registry/${{ parameters.ACRrepo }}:$tag"
          docker image tag buildimage $taggedimage 
        }

        docker image ls

        catch {
          throw $_ 
        }
      }

- task: AzureCLI@2
  name: DockerPush
  displayName: 'Docker Push'
  inputs:
    azureSubscription: '${{ parameters.ServiceConnection}}'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      try {
        $registry = "${{ parameters.ACRname}}.azurecr.io" #create registry url

        docker image ls
        
        docker image push --all-tags $registry/${{ parameters.ACRrepo }}

        if(!$?){
          throw "docker push failed for $registry/${{ parameters.ACRrepo }}:${{parameters.imageTags}}" #cross check for push failure
        }

        catch {
          throw $_ 
        }
      }

